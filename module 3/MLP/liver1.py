# -*- coding: utf-8 -*-
"""Liver1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bp1HyBMSnDBUgVtqHxA2ctWqTYS1v4w8
"""

import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import warnings
import pickle
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, recall_score, f1_score, precision_score
warnings.filterwarnings("ignore")

df = pd.read_csv("C:\\Users\\User\\Desktop\\fproject\\dataset\\liver_patient.csv")

df.head()

df.duplicated().sum()

df = df.drop_duplicates()

df.duplicated().sum()

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

df = df.rename({'Dataset':'Result'},axis=1)

df.columns

from sklearn.preprocessing import LabelEncoder
var_mod = ['Gender']
le = LabelEncoder()
for i in var_mod:
  df[i] = le.fit_transform(df[i]).astype(int)

df.corr()

df_sex = pd.get_dummies(df['Gender'])
df_new = pd.concat([df, df_sex], axis=1)
Droop_gender = df_new.drop(labels=['Gender' ],axis=1 )
Droop_gender.columns = ['Age', 'Total_Bilirubin', 'Direct_Bilirubin','Alkaline_Phosphotase','Alamine_Aminotransferase','Aspartate_Aminotransferase','Total_Protiens','Albumin','Albumin_and_Globulin_Ratio','Male','Fmale','Result']

X = Droop_gender.drop('Result',axis=1)
y = Droop_gender['Result']


# split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1, stratify = y)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Initialising the MLP
classifier = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000,activation='relu', solver='adam', random_state=42)

# Fitting the data
history = classifier.fit(X_train,y_train)

predictions = history.predict(X_test)

predictions

print(classification_report(y_test,predictions))

print("Report")
accuracy = (accuracy_score(y_test,predictions)*100)
print("Accuracy:", accuracy)

f1_score(y_test,predictions)

recall_score(y_test,predictions,average='weighted')

precision_score(y_test,predictions)

print("Confusion matrix")
cm2=confusion_matrix(y_test,predictions)
print(cm2)

sensitivity2 = cm2[1,1]/(cm2[1,1]+cm2[1,0])
print('Sensitivity : ', sensitivity2 )

specificity2 = cm2[0,0]/(cm2[0,0]+cm2[0,1])
print('Specificity : ',specificity2)

TN = cm2[0][0]
FN = cm2[1][0]
TP = cm2[1][1]
FP = cm2[0][1]
print("True Positive :",TP)
print("True Negative :",TN)
print("False Positive :",FP)
print("False Negative :",FN)
print("")
TPR = TP/(TP+FN)
TNR = TN/(TN+FP)
FPR = FP/(FP+TN)
FNR = FN/(TP+FN)
print("True Positive Rate :",TPR)
print("True Negative Rate :",TNR)
print("False Positive Rate :",FPR)
print("False Negative Rate :",FNR)
print("")
PPV = TP/(TP+FP)
NPV = TN/(TN+FN)
print("Positive Predictive Value :",PPV)
print("Negative predictive value :",NPV)


cm2=confusion_matrix(y_test, predictions)
print('Confusion matrix:')
print(cm2)



sns.heatmap(cm2/np.sum(cm2), annot=True, cmap = 'Blues', annot_kws={"size": 16},fmt='.2%')
plt.show()

pickle.dump(classifier,open('Liver-MLP.pkl', 'wb'))
